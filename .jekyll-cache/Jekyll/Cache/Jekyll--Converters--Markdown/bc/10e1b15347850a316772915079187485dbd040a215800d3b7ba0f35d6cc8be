I"�<h1 id="js基本类型数据存储方式及event-loop">JS基本类型数据存储方式及Event Loop</h1>

<h3 id="基礎内容">基礎内容</h3>

<p><img src="http://wason419.github.io/img/20191010/2019101001.png" alt="" />
<img src="http://wason419.github.io/img/20191010/2019101002.png" alt="" /></p>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">var</span> <span class="nx">a</span> <span class="o">=</span> <span class="nb">String</span><span class="p">(</span><span class="dl">'</span><span class="s1">1122</span><span class="dl">'</span><span class="p">)</span>
<span class="k">typeof</span><span class="p">(</span><span class="nx">a</span><span class="p">)</span>
<span class="dl">"</span><span class="s2">string</span><span class="dl">"</span>
<span class="kd">var</span> <span class="nx">b</span> <span class="o">=</span> <span class="k">new</span> <span class="nb">String</span><span class="p">(</span><span class="dl">'</span><span class="s1">1122</span><span class="dl">'</span><span class="p">)</span>
<span class="k">typeof</span><span class="p">(</span><span class="nx">b</span><span class="p">)</span>
<span class="dl">"</span><span class="s2">object</span><span class="dl">"</span>
<span class="kd">var</span> <span class="nx">c</span> <span class="o">=</span> <span class="dl">'</span><span class="s1">122121</span><span class="dl">'</span>
<span class="k">typeof</span><span class="p">(</span><span class="nx">c</span><span class="p">)</span>
<span class="dl">"</span><span class="s2">string</span><span class="dl">"</span>
</code></pre></div></div>

<h3 id="栈内存-和-堆内存">栈内存 和 堆内存</h3>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>1. JavaScript 中引用类型值的大小是不固定的，因此它们会被存储到 堆内存 中，由系统自动分配存储空间。
JavaScript 不允许直接访问堆内存中的位置，因此我们不能直接操作对象的堆内存空间，而是操作 对象的引用。

2. JavaScript 中的基础数据类型都有固定的大小，因此它们被存储到 栈内存 中。
我们可以直接操作保存在栈内存空间的值，因此基础数据类型都是 按值访问。此外，栈内存还会存储 对象的引用 (指针) 以及 函数执行时的运行空间。
</code></pre></div></div>

<p><img src="http://wason419.github.io/img/20191010/2019101003.png" alt="不同数据存储方式" /></p>

<h3 id="执行栈-和-任务队列">执行栈 和 任务队列</h3>
<p><img src="http://wason419.github.io/img/20191010/2019101004.png" alt="" /></p>
<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="dl">'</span><span class="s1">00000</span><span class="dl">'</span><span class="p">)</span>
<span class="nx">setTimeout</span><span class="p">(</span><span class="kd">function</span><span class="p">(){</span>
  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="dl">'</span><span class="s1">2</span><span class="dl">'</span><span class="p">)</span>
<span class="p">},</span><span class="mi">1000</span><span class="p">)</span>
<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="dl">'</span><span class="s1">11111</span><span class="dl">'</span><span class="p">)</span>
<span class="nx">setTimeout</span><span class="p">(</span><span class="kd">function</span><span class="p">(){</span>
  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="dl">'</span><span class="s1">1</span><span class="dl">'</span><span class="p">)</span>
<span class="p">},</span><span class="mi">1000</span><span class="p">)</span>
<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="dl">'</span><span class="s1">22222</span><span class="dl">'</span><span class="p">)</span>
<span class="nx">setTimeout</span><span class="p">(</span><span class="kd">function</span><span class="p">(){</span>
  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="dl">'</span><span class="s1">3</span><span class="dl">'</span><span class="p">)</span>
<span class="p">},</span><span class="mi">1000</span><span class="p">)</span>

<span class="nx">结果</span><span class="p">:</span>
<span class="nx">VM347</span><span class="p">:</span><span class="mi">1</span> <span class="mi">00000</span>
<span class="nx">VM347</span><span class="p">:</span><span class="mi">5</span> <span class="mi">11111</span>
<span class="nx">VM347</span><span class="p">:</span><span class="mi">9</span> <span class="mi">22222</span>

<span class="nx">VM347</span><span class="p">:</span><span class="mi">3</span> <span class="mi">2</span>
<span class="nx">VM347</span><span class="p">:</span><span class="mi">7</span> <span class="mi">1</span>
<span class="nx">VM347</span><span class="p">:</span><span class="mi">11</span> <span class="mi">3</span>
</code></pre></div></div>

<p>从上面的执行顺序可看出<br />
1.系统会先执行 同步操作，同步操作是最先并速度比较快的<br />
2.异步操作 会放置在 任务队列 里，先进先出(执行)
<img src="http://wason419.github.io/img/20191010/2019101005.png" alt="" />
<img src="http://wason419.github.io/img/20191010/2019101006.png" alt="" /></p>

<p>补充理解：
① 执行栈内 会先执行所有同步操作，同步任务执行完后，会检查任务队列中 是否还有(异步)任务，<br />
② 有的话，便会把任务放置到执行栈中执行，并且，任务队列前面会有异步处理模块，待异步处理有结果才会被放到任务队列中。<br />
③ 任务队列每次只处理一个任务，即当执行栈检查到任务队列不为空时，就取头一个任务放到执行栈，基于Event-loop事件循环机制，执行栈中处理完头一个异步任务后，便会再次查询任务队列，不为空则再从中取头一个，直至任务队列为空。</p>

<p>参考网文:</p>
<ol>
  <li><a href="https://www.cnblogs.com/phillyx/p/5603738.html">js的基本数据类型有哪些?</a></li>
  <li><a href="https://juejin.im/post/5cbc0a9cf265da03b11f3505">最后一次搞懂 Event Loop</a></li>
</ol>

:ET