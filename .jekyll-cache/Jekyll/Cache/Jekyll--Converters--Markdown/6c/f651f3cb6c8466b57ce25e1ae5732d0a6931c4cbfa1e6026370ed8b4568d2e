I"�<h1 id="webpack学习之插件plugins入门">webpack学习之插件[Plugins](入门)</h1>
<h3 id="插件plugins">插件（Plugins）</h3>

<ol>
  <li>插件（Plugins）是用来拓展Webpack功能的，它们会在整个构建过程中生效，执行相关的任务。</li>
  <li>Loaders是在打包构建过程中用来处理源文件的（JSX，Scss，Less..），一次处理一个。<br />
Plugins并不直接操作单个文件，它直接对整个构建过程起作用。</li>
  <li>应用：
1）给打包后代码添加版权声明的插件
    <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>const webpack = require('webpack');
module.exports = {
...
 module: {
     rules: [
         {
             test: /(\.jsx|\.js)$/,
             use: {
                 loader: "babel-loader"
             },
             exclude: /node_modules/
         },
         {
             test: /\.css$/,
             use: [
                 {
                     loader: "style-loader"
                 }, {
                     loader: "css-loader",
                     options: {
                         modules: true
                     }
                 }, {
                     loader: "postcss-loader"
                 }
             ]
         }
     ]
 },
 plugins: [
   new webpack.BannerPlugin('版权所有，翻版必究')
 ],
};
</code></pre></div>    </div>
    <p>2）HtmlWebpackPlugin<br />
这个插件的作用是依据一个简单的index.html模板，生成一个自动引用你打包后的JS文件的新index.html。这在<strong>每次生成的js文件名称不同时非常有用</strong>（比如添加了hash值）</p>
  </li>
</ol>

<hr />
<p>安装：npm install –save-dev html-webpack-plugin</p>

<p><strong>对原先目录结构做些更改：</strong><br />
①  移除public文件夹，利用此插件，index.html文件会自动生成，此外CSS已经通过前面的操作打包到JS中了.<br />
② 在app目录下，创建一个index.tmpl.html文件模板，这个模板包含title等必须元素，在编译过程中，插件会依据此模板生成最终的html页面，会自动添加所依赖的 css, js，favicon等文件</p>

<p>index.tmpl.html中的模板源代码如下：</p>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>&lt;!DOCTYPE html&gt;
&lt;html lang="en"&gt;
  &lt;head&gt;
    &lt;meta charset="utf-8"&gt;
    &lt;title&gt;Webpack Sample Project&lt;/title&gt;
  &lt;/head&gt;
  &lt;body&gt;
    &lt;div id='root'&gt;
    &lt;/div&gt;
  &lt;/body&gt;
&lt;/html&gt;
</code></pre></div></div>
<p>③ 更新webpack的配置文件，方法同上,新建一个build文件夹用来存放最终的输出文件</p>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>const webpack = require('webpack');
const HtmlWebpackPlugin = require('html-webpack-plugin');

module.exports = {
    entry: __dirname + "/app/main.js",//已多次提及的唯一入口文件
    output: {
        path: __dirname + "/build",
        filename: "bundle.js"
    },
    devtool: 'eval-source-map',
    devServer: {
        contentBase: "./public",//本地服务器所加载的页面所在的目录
        historyApiFallback: true,//不跳转
        inline: true//实时刷新
    },
    module: {
        rules: [
            {
                test: /(\.jsx|\.js)$/,
                use: {
                    loader: "babel-loader"
                },
                exclude: /node_modules/
            },
            {
                test: /\.css$/,
                use: [
                    {
                        loader: "style-loader"
                    }, {
                        loader: "css-loader",
                        options: {    // css-loader的原先写法在没有使用插件HtmlWebpackPlugin可解决报错并正常使用，但如果要加入该插件需要将该 options 的设置改为这种写法
                            modules: true
                        }
                    }, {
                        loader: "postcss-loader"
                    }
                ]
            }
        ]
    },
    plugins: [
        new webpack.BannerPlugin('版权所有，翻版必究'),
        new HtmlWebpackPlugin({
            template: __dirname + "/app/index.tmpl.html"//new 一个这个插件的实例，并传入相关的参数
        })
    ],
}; 

</code></pre></div></div>

<p><strong>执行 npm start ,打包后 即可在build文件夹内看到新文件</strong></p>

<p><img src="http://wason419.github.io/img/20200610/2020061001.png" alt="" /></p>

<p><strong><em>To Be Continue~</em></strong></p>

<h3 id="参考文章">参考文章</h3>
<p><a href="https://segmentfault.com/a/1190000006178770">1. 入门 webpack，看这篇就够了</a><br />
<a href="https://www.webpackjs.com/guides/getting-started/">2. webpack 官网</a><br />
<a href="https://segmentfault.com/a/1190000013699050">3. webpack坑系列–安装webpack-cli</a></p>

:ET