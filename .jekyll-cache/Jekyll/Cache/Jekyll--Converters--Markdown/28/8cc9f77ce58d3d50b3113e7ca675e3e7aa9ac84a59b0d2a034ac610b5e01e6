I"�<h1 id="正则笔记-常用方法">正则笔记-常用方法</h1>
<h3 id="正则常用方法">正则常用方法</h3>

<p>正则常用的4种方法：</p>
<ul>
  <li>test() </li>
  <li>exec() </li>
  <li>match() </li>
  <li>replace()</li>
</ul>

<p>正则调用：test() 、exec() 
① test( )   只返回boolean值；
② exec( ) 可返回匹配的文本内容</p>

<p>字符串调用：match()  replace()
① match()    可返回匹配的文本内容
② replace()  对匹配的内容进行修改</p>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>e.g.1
var reg = /(\d{4})-(\d{2})-(\d{2})/；
console.log('符号：'+reg.exec('1993-12-23'))
符号：1993-12-23,1993,12,23

e.g.2
返回的内容里就包括了原字符串、各个匹配的字符，然后可以用数组的形式获取。
var reg=/(\d{4})-(\d{2})-(\d{2})/
console.log('符号：'+reg.exec('1993-12-23'));
var matchObj = reg.exec('1993-12-23');        //返回的是对象
var year=matchObj[1];
var month=matchObj[2];
var day=matchObj[3];
console.log('year:'+year+',month:'+month+',day:'+day)

符号：1993-12-23,1993,12,23
year:1993,month:12,day:23
</code></pre></div></div>
<p>参考文章：<a href="https://blog.csdn.net/mengxiaohuan314/article/details/79809047">正则常用的四个方法</a></p>

<h3 id="正则表达式的--">正则表达式的() [] {}：</h3>

<ol>
  <li>() 是为了提取匹配的字符串。表达式中有几个()就有几个相应的匹配字符串。也就是说一个()就是一个组元素，有n个()则匹配出来的对象里有n个元素
    <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>(\s*)表示连续空格的字符串。
</code></pre></div>    </div>
  </li>
  <li>[]是定义匹配的字符范围。
    <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>比如 [a-zA-Z0-9] 表示相应位置的字符要匹配英文字符和数字。
[\s*]表示空格或者*号。
</code></pre></div>    </div>
  </li>
  <li>{}一般用来表示匹配的长度.
    <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>比如 \s{3} 表示匹配三个空格，\s[1,3]表示匹配一到三个空格。
</code></pre></div>    </div>
    <h3 id="source-与-flags">source 与 flags</h3>
    <p>ES5 的source属性可以返回正则的正文</p>
    <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>console.log('字符：'+ /abc/ig.source)
字符：abc
</code></pre></div>    </div>
    <p>ES6 的flags属性可以返回正则的修饰符</p>
    <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>console.log('字符：'+ /abc/ig.flags)
字符：gi
</code></pre></div>    </div>
    <h3 id="正则表达式m修饰符">正则表达式m修饰符</h3>
    <p>m修饰符规定: 正则表达式可以执行多行匹配。
m修饰符的作用是修改<code class="language-plaintext highlighter-rouge">^</code>和<code class="language-plaintext highlighter-rouge">$</code>在正则表达式中的作用，让它们分别表示行首和行尾。</p>
  </li>
</ol>

<p>在默认状态下，一个字符串无论是否换行只有一个开始<code class="language-plaintext highlighter-rouge">^</code>和结尾<code class="language-plaintext highlighter-rouge">$</code>，如果采用多行匹配，那么每一个行都有一个<code class="language-plaintext highlighter-rouge">^</code>和结尾<code class="language-plaintext highlighter-rouge">$</code>。
即使正则表达式中有<code class="language-plaintext highlighter-rouge">^</code>、<code class="language-plaintext highlighter-rouge">$</code>，然后匹配的字符串中有换行了，但还是会报匹配失败，所以加上m修饰符后，便可匹配多行数据了。
例子</p>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>var str = "This is an\n antzone good";
var reg = /an$/m;
console.log(str.match(reg));
以上代码可以匹配字符串"an"，因为采用了多行匹配。

var reg = /^b/m;
var str = 'test\nbbs';
console.log(str.match(reg));
匹配到b，因为加了m修饰符之后，^已经表示行首，由于bbs在字符串第二行的行首，所以可以成功地匹配。
</code></pre></div></div>
<h3 id="正则表达式修饰符">正则表达式?修饰符</h3>

<p><strong>可以用&lt;.*?&gt;实现非贪婪或最小匹配（即若加了？则拿到第一次匹配成功的字符串）</strong></p>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>①. console.log('字符：' + '&lt;H1&gt;Chapter 1 - 介绍正则表达式&lt;/H1&gt;'.match(/&lt;.*&gt;/))
字符：&lt;H1&gt;Chapter 1 - 介绍正则表达式&lt;/H1&gt;

②. console.log('字符：' + '&lt;H1&gt;Chapter 1 - 介绍正则表达式&lt;/H1&gt;'.match(/&lt;.*?&gt;/))
字符：&lt;H1&gt;
</code></pre></div></div>
<p><strong>可以用?=表示判断条件</strong></p>

<ol>
  <li>先行断言和先行否定断言
```
console.log(‘字符：’ + ‘100% of US presidents hava been male’.match(/\d+(?=%)/))
字符：100</li>
</ol>

<p>console.log(‘字符：’ + ‘that's all 44 of them’.match(/\d+(?!%)/))
字符：44</p>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>2. 后行断言和后行否定断言  后行断言需要格式?&lt;=, 它的匹配是先匹配外部/(?&lt;=y)x/的x,再匹配左边的y的部分
</code></pre></div></div>
<p>console.log(‘字符：’ + /(?&lt;=$)\d+/.exec(‘Benjamin Framd is on the $100 bill’))
字符：100</p>

<p>console.log(‘字符：’ + /(?&lt;!$)\d+/.exec(‘it's is worth about €90’))
字符：90</p>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>3. 后行断言执行顺序先从左到右扫描，发现匹配以后再回过头从右到左，所以反斜杠引用(\1)必须放在前面才可以
</code></pre></div></div>
<p>console.log(‘字符：’ + /(?&lt;=(o)d\1)r/.exec(‘hodor’))
字符：null —  这种方式是不行的</p>

<p>console.log(‘字符：’ + /(?&lt;=\1d(o))r/.exec(‘hodor’))
字符：r,o — 这种是可以的
```</p>

<h3 id="正则中的--的意思">正则中的 (?:) 的意思</h3>
<p><img src="http://wason419.github.io/img/20190928/2019092801.png" alt="正则中的 (?:) 标示的含义" /></p>

:ET